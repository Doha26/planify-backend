generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String?       @unique
  password      String?
  provider      String        @default("email")
  socialId      String?       @unique
  firstName     String?       @unique
  lastName      String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(user)
  status        UserStatus    @default(inactive)
  groups        UserGroups    @default(user)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  
  sessions      Session[]
  accounts      Account[]
  events        UserEvents[]
  eventTypes    EventTypeEntity[]
  availability  Availability[]
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  hash         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  sessionToken String?
  expires      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Account {
  userId            Int
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@id([userId, type])
}

model Event {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  title             String    @unique
  startTime         DateTime
  endTime           DateTime
  type              EventType @default(personal)
  permissions       Json?
  description       String?
  location          String?
  isRecurring       Boolean   @default(false)
  recurrencePattern String?

  userEvents UserEvents[]
}

model UserEvents {
  userId  Int
  eventId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, eventId])
  @@index([eventId])
  @@index([userId])
}

model EventTypeEntity {
  id                Int        @id @default(autoincrement())
  title             String
  duration          Int        @default(30)
  url               String?
  description       String?
  active            Boolean    @default(true)
  videoCallSoftware String     @default("Google Meet")
  userId            Int?
  createdAt         DateTime   @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Availability {
  id        String        @id @default(uuid())
  day       AvailabilityDay
  fromTime  String?
  tillTime  String?
  isActive  Boolean       @default(true)
  userId    Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String @id
  token      String
  expires    DateTime
}

enum UserRole {
  admin
  user
}

enum UserStatus {
  active
  inactive
}

enum UserGroups {
  admin
  user
}

enum EventType {
  personal
  team
  project
}

enum AvailabilityDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
